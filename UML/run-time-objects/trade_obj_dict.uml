@startjson
{
  "pair1":{
    "_id": "current timestamp",
    "tradeid": "[dt index of obj creation]",
    "status": "",
    "enter": {
      "limit": {
        "price": "",
        "quantity": "",
        "amount": "",
        "expire": ""
      },
      "market": {
        "price": "",
        "quantity": "",
        "amount": ""
      },
      "enterTime": ""
    },
    "exit": {
      "oco": {
        "limitPrice": "",
        "stopPrice": "",
        "stopLimitPrice": "",
        "quantity": "",
        "amount": "",
        "expire": ""
      },
      "limit": {
        "price": "",
        "quantity": "",
        "amount": "",
        "expire": ""
      },
      "market": {
        "price": "",
        "quantity": "",
        "amount": ""
      },
      "exitTime": ""
    },
    "result": {
      "cause": "",
      "closedTime": "",
      "buyAmount": "",
      "buyPrice": "",
      "sellAmount": "",
      "sellPrice": "",
      "profit": "",
      "liveTime": ""
    }
  },
  "pair2":{}
}
@endjson

1. This object is created once when the "ENTER" decision is made with certain conditions.
  1.1 If no enter decision is made, then the [pair1] object will not be created at all
  1.2 If an [pair] object is created for the first time then the status is "created".

2. It is sent to the Broker to place the order. 
3. It is saved to the "Live Trade DB" to keep track.
  3.1 If the status is "created" and oder is placed successfully(verified from broker)
4. In each cycle, the status of the [pair1] is updated by sync'ing with the Broker.
5. When the status is updated as "Closed", it is moved from "LTDB" to "HTDB" (Historical Trade DB)

status
  open_enter:
  partially_closed_enter:
  open_exit:
  partially_closed_exit:
  closed:
  
Canceled
  If an Limit Order is partially filled than the rest is canceled. For the sake of simlicity(for now)
  In other words, both Canceled and Closed exist at the same time

ENTER MODULE:
 - Default enter type is "limit"

EXIT MODULE:
  - It contains either "oco" or "limit" or "market"
    - Priority: market > limit > oco:
    '''
    if market in keys:
      do market exit
    elif limit in keys:
      do limit exit
    elif oco in keys:
      do oco exit
    else
    '''

RESULT MODULE:
  - cause:
    - closed: bought and sold successfully
    - enter_expire: buy limit order expired
    - exit_expire: not clear what to do
    - external: manual interventions

  amount: price * quantity

  Note: Enter and Exit modules are written once in the decision. They do no get updated.
  However, when buy or sell operations are done. Related information is gathered from the
  broker and written to the results. This approach enable us to compare the expectation
  and the reality

