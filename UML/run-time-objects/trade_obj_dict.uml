@startjson
{
  "pair1":{
    "_id": "current timestamp",
    "decision_time": "[dt index of obj creation]",
    "status": "",
    "enter": {
      "limit": {
        "price": "",
        "quantity": "",
        "amount": "",
        "expire": "",
        "orderId": ""
      },
      "market": {
        "quantity": "",
        "amount": "",
		"orderId": ""
      }
    },
    "exit": {
      "oco": {
        "limitPrice": "",
        "stopPrice": "",
        "stopLimitPrice": "",
        "stopLimit_tradeid": "",
        "quantity": "",
        "amount": "",
        "expire": "",
		"limit_orderId": "",
		"stopLimit_orderId": ""
      },
      "limit": {
        "price": "",
        "quantity": "",
        "amount": "",
        "expire": "",
		"orderId": ""
      },
      "market": {
        "quantity": "",
        "amount": "",
		"orderId": ""
      }
    },
    "result": {
      "cause": "",
      "enter": {
        "type": "",
        "time": "",
        "price": "",
        "quantity": "",
        "amount": ""
      },
      "exit": {
        "type": "",
        "time": "",
        "price": "",
        "quantity": "",
        "amount": ""
      },
      "profit": 0,
      "liveTime": 0,
      "history":["open_enter", "open_exit", "closed"]
    },
    "action": "[optional and transitory]"
  },
  "pair2":{}
}
@endjson

1. This object is created once when the "ENTER" decision is made with certain conditions.
  1.1 If no enter decision is made, then the [pair1] object will not be created at all
  1.2 If an [pair] object is created for the first time then the status is "created".

2. It is sent to the Broker to place the order. 
3. It is saved to the "Live Trade DB" to keep track.
  3.1 If the status is "created" and oder is placed successfully(verified from broker)
4. In each cycle, the status of the [pair1] is updated by sync'ing with the Broker.
5. When the status is updated as "Closed", it is moved from "LTDB" to "HTDB" (Historical Trade DB)

NOTE: A TO should contain multiple orderId. Considering the fact that multiple entry/exit level might be possible in future,
	it might be better to have a list in lto['enter']['limit'] that contains multiple 'entry_module' with orderId's in it.

MAIN MODULE:

  _id:                                              Gathered from the Binance Trade id

  NOTE: tradeid is removed from here since multile tradeid will be required

  action:                                           In case of an updatein decision, the action item can be added to the
                                                    lto and the action is executed.

    - cancel                                        Cancel lto
    - update [TODO]                                 Cancel and update
      - if status:'enter_expire', it may cancel the old order and create a new one with the current values
      - if status:'exit_expire', it may cancel the old order(limit or oco) and create a new one with the current values
    - market_enter                                  Cancel the previous one and market enter
    - market_exit                                   Cancel the previous one and market exit
    - execute_exit                                  Place the exit order in the to

  status:
    Status of a trade object:
    - open_enter:                                   Trade is waiting to enter
    - partially_closed_enter:
    - enter_expire:           (Temporary State):    Trade enter time is expired, this will be converted to:
      - closed                                        Give up on the trade and execute cancel decision
      - open_enter                                    Give a change to to and postpone the expiration time
    - waiting_exit:           (Temporary State):    Enter is successful and the exit order is waiting to be placed
    - open_exit:                                    Trade is waiting to exit
    - partially_closed_exit:
    - exit_expire:            (Temporary State):    Trade exit time is expired
      - cancel                                        Market sell and exit
      - open_exit                                     Postpone the expiration time
      
    - closed:                                       Trade completed/canceled (Only way to go to [hist-trade])
  NOTE: Temporary states are only used to evaluate the status of the to by the algorithm it may decide, execute and update the status

Canceled
  If an Limit Order is partially filled than the rest is canceled. For the sake of simlicity(for now)
  In other words, both Canceled and Closed exist at the same time

ENTER MODULE:
  - Enter module tells how it is planned to enter
 - Default enter type is "limit"

EXIT MODULE:
  - Exit module tells how it is planned to exit
  - It contains either "oco" or "limit" or "market"
    - Priority: market > limit > oco:
    '''
    if market in keys:
      do market exit
    elif limit in keys:
      do limit exit
    elif oco in keys:
      do oco exit
    else
    '''

RESULT MODULE:
  - Result module tells you what actually happend
  
  - cause: main.status might be the same with cause such as 'closed', 'enter_expire', 'exit_expire'
    - closed: bought and sold successfully
    - enter_expire: buy limit order expired
    - exit_expire: not clear what to do
    - external: manual interventions

  - enter.type:
    - limit
    - market (TODO)

  - exit.type:
    - oco_limit                                         status:closed | cause:closed
    - oco_stoploss                                      status:closed | cause:closed
    - limit                                             status:closed | cause:closed
    - market                                            status:closed | cause:exit_expire

  amount: price * quantity

  Note: Enter and Exit modules are written once in the decision. They do no get updated.
  However, when buy or sell operations are done. Related information is gathered from the
  broker and written to the results. This approach enable us to compare the expectation
  and the reality,


Possible scenarios:
Enter Type            Exit Type
                                       /-----oco_limit
limit--------\         /-----oco------|
              |-------|-----limit      \-----oco_stoploss
market-------/         \-----market